install.packages("RGtk2")
warnings()
library(rattle)
library(RGtk2)
library(rattle)
library(swirl)
library()
update.packages()
install.packages("rattle")
library(rattle)
rattle()
library(rattle)
rattle()
library(rattle)
rattle()
rattle()
rattle()
rattle()
library(rattle)
rattle()
library(rattle)
rattle()
library(rattle)
rattle()
library(rattle)
rattle()
names(mylist) <- c("first", "second", "third")
# Split by space, then unlist
words <- unlist(strsplit(tolower(mystr), " ", fixed = TRUE))
mylist <- list("Sam", c(13, -0.1, 1.3), c(TRUE, FALSE))
print(mylist)
str(mylist)
length(mylist)
print(mylist[1])
print(class(mylist[1]))
print(mylist[c(1, 3)])
print(class(mylist[c(1, 3)]))
print(mylist[[2]])
print(class(mylist[[2]]))
# This gets the third piece of mylist[[2]]
print(mylist[[c(2, 3)]])
# And this gets the second piece of mylist[[3]]
print(mylist[[c(3, 2)]])
# This will produce an error in this case. Why?
# print(mylist[[1:2]])
names(mylist) <- c("first", "second", "third")
print(mylist)
mylist <- list(first = "Sam", second = c(13, -0.1, 1.3), third = c(TRUE, FALSE))
print(names(mylist))
identical(mylist$second, mylist[[2]])
identical(mylist[["second"]], mylist[[2]])
mylist$fourth <- c("Iowa", "Georgia")
mylist[[5]] <- c(-1, 0, 1, 2)
length(mylist)
mylist$fourth <- NULL
print(mylist)
print(unlist(mylist))
df <- readr::read_csv("des_moines_housing_with_latlon.csv")
df$city <- factor(df$city)
mylist <- split(df, df$city)
print(class(mylist))
print(names(mylist))
length(mylist)
print(class(mylist$Altoona))
print(names(mylist$Altoona))
nrow(mylist$Altoona)
# Get list of HTML tables from URL
suppressPackageStartupMessages(library(rvest))
url <- "https://en.wikipedia.org/wiki/List_of_national_capitals_in_alphabetical_order"
tb <- html_table(read_html(url), fill = TRUE)
print(class(tb))
print(class(tb[[2]]))
mystr <- c("The quick brown fox jumps over the lazy dog. All letters.",
"A dog, a panic in a pagoda.")
print(mystr)
# Search for "dog", which appears in position 1 and 2 of mystr
grep("dog", mystr, fixed = TRUE)
# Search for "pagoda", which appears in position 2 only
grep("pagoda", mystr, fixed = TRUE)
# Search for "all", which appears nowhere
grep("all", mystr, fixed = TRUE)
# This is a case-insensitive search with a match in the first position
grep("all", tolower(mystr), fixed = TRUE)
grepl(pattern = "dog", x = mystr, fixed = TRUE) # Search for "dog"
grepl("pagoda", mystr, fixed = TRUE)
grepl("all", mystr, fixed = TRUE)
grepl("all", tolower(mystr), fixed = TRUE)
nchar(mystr)
# Extract positions 10 to 19
print(substr(mystr, 10, 19))
# Extract positions 25 to 35. Note that we get just a few characters if
# length is less than 35
print(substr(mystr, 25, 35))
# Split by period
mylist <- strsplit(mystr, ".", fixed = TRUE)
print(mylist)
# Split by space, then unlist
words <- unlist(strsplit(tolower(mystr), " ", fixed = TRUE))
print(words)
print(paste(words[1], words[2], sep = " "))
print(paste(words[1], words[2], sep = ""))
print(paste(words[1], words[2], sep = "."))
print(paste(words[1], "and", words[2], "but", words[3], sep = " "))
print(sprintf("%s %s", words[1], words[2]))
print(sprintf("%s%s", words[1], words[2]))
print(sprintf("%s.%s", words[1], words[2]))
print(sprintf("%s and %s but %s", words[1], words[2], words[3]))
rm(list = ls())
library(readr)
library(dplyr)
load('Official_Stats_Merged.rda')
setwd("C:/Users/zmcda/OneDrive - University of Iowa/University of Iowa/Thesis/NFL_officials_analysis")
load('Official_Stats_Merged.rda')
load('Official_Games_Merged.rda')
num_officials_stats <- select(officials_stats, playoff_games, home, visitor, home_penalties
, home_wp, total_penalties, penalty_yards, avg_penalties,
avg_yards, league_home_penalties, league_home_wp,
league_avg_penalties, league_avg_yards)
################################################################################
#Home Bias & Harshness
################################################################################
num_officials_stats$avg_yard_per_penalty <- num_officials_stats$penalty_yards / num_officials_stats$total_penalties
num_officials_stats$home_bias <- ifelse(num_officials_stats$home_wp >
num_officials_stats$league_home_wp, 1, 0)
num_officials_stats$harsh <- ifelse( num_officials_stats$avg_yard_per_penalty >= 12, 1, 0)
num_officials_stats$high_penalty <- ifelse(num_officials_stats$avg_penalties >= num_officials_stats$league_avg_penalties, 1, 0)
num_officials_stats$tenure <- officials_stats$years - as.integer(officials_stats$start_year)
num_officials_stats <- na.omit(num_officials_stats)
## To filter on correlations, we first get the correlation matrix for the
## predictor set
dfnumCorr <- cor(num_officials_stats)
## caret's findCorrelation function is used to identify columns to remove.
## The absolute values of pair-wise correlations are considered. If two variables
## have a high correlation, the function looks at the mean absolute correlation
## of each variable and removes the variable with the largest mean absolute correlation.
library(caret)
highCorr <- findCorrelation(dfnumCorr, .5)
highCorr
#Check columns before removing
#####names(dffull[highCorr]) this was incorrect dataframe form Script 4v5
names(num_officials_stats[highCorr])
#####Added addition functions to write the correlation out in a file for visual analysis
#change to dataframe
outCorMatrx = as.data.frame(dfnumCorr)
#write correlation matrix
write_csv(outCorMatrx, "OfficialStatsCorMatrx.csv")
num_officials_stats <- select(officials_stats, home_penalties
, home_wp, total_penalties, penalty_yards, avg_penalties,
avg_yards, )
num_officials_stats$avg_yard_per_penalty <- num_officials_stats$penalty_yards / num_officials_stats$total_penalties
num_officials_stats$home_bias <- ifelse(num_officials_stats$home_wp >
num_officials_stats$league_home_wp, 1, 0)
num_officials_stats$harsh <- ifelse( num_officials_stats$avg_yard_per_penalty >= 12, 1, 0)
num_officials_stats$high_penalty <- ifelse(num_officials_stats$avg_penalties >= num_officials_stats$league_avg_penalties, 1, 0)
num_officials_stats$tenure <- officials_stats$years - as.integer(officials_stats$start_year)
rm(list = ls())
load('Official_Stats_Merged.rda')
load('Official_Games_Merged.rda')
################################################################################
#Making numerical and categoric dataframes
################################################################################
num_officials_stats <- officials_stats
num_officials_stats$avg_yard_per_penalty <- num_officials_stats$penalty_yards / num_officials_stats$total_penalties
num_officials_stats$home_bias <- ifelse(num_officials_stats$home_wp >
num_officials_stats$league_home_wp, 1, 0)
num_officials_stats$harsh <- ifelse( num_officials_stats$avg_yard_per_penalty >= 12, 1, 0)
num_officials_stats$high_penalty <- ifelse(num_officials_stats$avg_penalties >= num_officials_stats$league_avg_penalties, 1, 0)
num_officials_stats$tenure <- officials_stats$years - as.integer(officials_stats$start_year)
num_officials_stats <- select(officials_stats, home_penalties
, home_wp, total_penalties, penalty_yards, avg_penalties,
avg_yards, avg_yard_per_penalty, home_bias, harsh,
high_penalty, tenure)
num_officials_stats <- select(officials_stats, home_penalties
, home_wp, total_penalties, penalty_yards, avg_penalties,
avg_yards, avg_yard_per_penalty, home_bias, harsh,
high_penalty, tenure)
num_officials_stats <- select(officials_stats, home_penalties
, home_wp, total_penalties, penalty_yards, avg_penalties,
avg_yards, home_bias, harsh,
high_penalty, tenure)
num_officials_stats <- select(num_officials_stats, home_penalties
,home_wp, total_penalties, penalty_yards, avg_penalties,
avg_yards,avg_yard_per_penalty, home_bias, harsh,
high_penalty, tenure)
num_officials_stats <- na.omit(num_officials_stats)
## To filter on correlations, we first get the correlation matrix for the
## predictor set
dfnumCorr <- cor(num_officials_stats)
## caret's findCorrelation function is used to identify columns to remove.
## The absolute values of pair-wise correlations are considered. If two variables
## have a high correlation, the function looks at the mean absolute correlation
## of each variable and removes the variable with the largest mean absolute correlation.
library(caret)
highCorr <- findCorrelation(dfnumCorr, .5)
highCorr
#Check columns before removing
#####names(dffull[highCorr]) this was incorrect dataframe form Script 4v5
names(num_officials_stats[highCorr])
#####Added addition functions to write the correlation out in a file for visual analysis
#change to dataframe
outCorMatrx = as.data.frame(dfnumCorr)
#write correlation matrix
write_csv(outCorMatrx, "OfficialStatsCorMatrx.csv")
rm(list = ls())
library(readr)
library(dplyr)
load("game_with_total_experience.rda")
###############################################################################
# Total Penalties vs Year ANOVA
###############################################################################
game_df <- group_by(game_df, year)
#game_df <- ungroup(game_df)
yearly_penalty_stats <- summarize(game_df, total_penalties = sum(total_penalties), avg_penalties =
mean(total_penalties), total_yards = sum(home_yards+ away_yards), avg_yards =
mean(home_yards+away_yards))
###run anovas on this table
game_df <- game_df[game_df$year != 2020,]
fit<-aov(total_penalties~year, data=game_df) # Specify data frame
class(fit) # Object of class "aov"
# Extract specific attributes with $
fit$coefficients
# Easier to use summary()
summary(fit)
rm(list = ls())
load('team_penalties_by_year.rda')
team_penalties_by_year <- team_penalties_by_year[team_penalties_by_year$year != 2020,]
################################################################################
#TOTAL PENALTIES
fit<-aov(total_penalties~team_name,
data=team_penalties_by_year) # Specify data frame
class(fit) # Object of class "aov"
# Extract specific attributes with $
fit$coefficients
# Easier to use summary()
summary(fit)

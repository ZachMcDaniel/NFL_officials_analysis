<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20204.21.0114.0916                               -->
<workbook original-version='18.1' source-build='2020.4.1 (20204.21.0114.0916)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <_.fcp.SetMembershipControl.true...SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='team_penalties_by_year (team_penalties_by_year)' inline='true' name='federated.0ybiarh0aohyf01ead9vo15ig8ud' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='team_penalties_by_year' name='excel-direct.18nol2a18ojoqv1gwyd9y0puml26'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/zmcda/OneDrive - University of Iowa/University of Iowa/Thesis/NFL_officials_analysis/tables/team_penalties_by_year.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.18nol2a18ojoqv1gwyd9y0puml26' name='team_penalties_by_year' table='[team_penalties_by_year$]' type='table'>
          <columns gridOrigin='A1:H702:no:A1:H702:0' header='yes' outcome='6'>
            <column datatype='string' name='team_name' ordinal='0' />
            <column datatype='integer' name='year' ordinal='1' />
            <column datatype='integer' name='total_home_penalties' ordinal='2' />
            <column datatype='integer' name='home_yards' ordinal='3' />
            <column datatype='integer' name='total_away_penalties' ordinal='4' />
            <column datatype='integer' name='away_yards' ordinal='5' />
            <column datatype='integer' name='total_penalties' ordinal='6' />
            <column datatype='integer' name='total_yards' ordinal='7' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.18nol2a18ojoqv1gwyd9y0puml26' name='team_penalties_by_year' table='[team_penalties_by_year$]' type='table'>
          <columns gridOrigin='A1:H702:no:A1:H702:0' header='yes' outcome='6'>
            <column datatype='string' name='team_name' ordinal='0' />
            <column datatype='integer' name='year' ordinal='1' />
            <column datatype='integer' name='total_home_penalties' ordinal='2' />
            <column datatype='integer' name='home_yards' ordinal='3' />
            <column datatype='integer' name='total_away_penalties' ordinal='4' />
            <column datatype='integer' name='away_yards' ordinal='5' />
            <column datatype='integer' name='total_penalties' ordinal='6' />
            <column datatype='integer' name='total_yards' ordinal='7' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[team_penalties_by_year]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:H702:no:A1:H702:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>team_name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[team_name]</local-name>
            <parent-name>[team_penalties_by_year]</parent-name>
            <remote-alias>team_name</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[team!penalties!by!year_81A8D7F767794978845E2F0524DE833E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[team_penalties_by_year]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[team!penalties!by!year_81A8D7F767794978845E2F0524DE833E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_home_penalties</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_home_penalties]</local-name>
            <parent-name>[team_penalties_by_year]</parent-name>
            <remote-alias>total_home_penalties</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[team!penalties!by!year_81A8D7F767794978845E2F0524DE833E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>home_yards</remote-name>
            <remote-type>20</remote-type>
            <local-name>[home_yards]</local-name>
            <parent-name>[team_penalties_by_year]</parent-name>
            <remote-alias>home_yards</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[team!penalties!by!year_81A8D7F767794978845E2F0524DE833E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_away_penalties</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_away_penalties]</local-name>
            <parent-name>[team_penalties_by_year]</parent-name>
            <remote-alias>total_away_penalties</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[team!penalties!by!year_81A8D7F767794978845E2F0524DE833E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>away_yards</remote-name>
            <remote-type>20</remote-type>
            <local-name>[away_yards]</local-name>
            <parent-name>[team_penalties_by_year]</parent-name>
            <remote-alias>away_yards</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[team!penalties!by!year_81A8D7F767794978845E2F0524DE833E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_penalties</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_penalties]</local-name>
            <parent-name>[team_penalties_by_year]</parent-name>
            <remote-alias>total_penalties</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[team!penalties!by!year_81A8D7F767794978845E2F0524DE833E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_yards</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_yards]</local-name>
            <parent-name>[team_penalties_by_year]</parent-name>
            <remote-alias>total_yards</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[team!penalties!by!year_81A8D7F767794978845E2F0524DE833E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Calculation1' datatype='real' name='[Calculation_1743174570205835264]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='STDEV([total_penalties])' />
      </column>
      <column datatype='string' name='[Team Name (group) (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[Team Name (group)]' new-bin='true'>
          <bin default-name='false' value='&quot;Bad&quot;'>
            <value>&quot; Raiders&quot;</value>
            <value>&quot;Rams&quot;</value>
            <value>&quot;Ravens&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Good&quot;'>
            <value>&quot; Jets&quot;</value>
            <value>&quot;Colts&quot;</value>
            <value>&quot;Indianapolis Colts&quot;</value>
            <value>&quot;New York Jets&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Neutral&quot;'>
            <value>&quot; Panthers&quot;</value>
            <value>&quot;49ers&quot;</value>
            <value>&quot;Bears&quot;</value>
            <value>&quot;Bengals&quot;</value>
            <value>&quot;Bills&quot;</value>
            <value>&quot;Broncos&quot;</value>
            <value>&quot;Browns&quot;</value>
            <value>&quot;Buccaneers&quot;</value>
            <value>&quot;Cardinals&quot;</value>
            <value>&quot;Chargers&quot;</value>
            <value>&quot;Chiefs&quot;</value>
            <value>&quot;Cowboys&quot;</value>
            <value>&quot;Dolphins&quot;</value>
            <value>&quot;Eagles&quot;</value>
            <value>&quot;Falcons&quot;</value>
            <value>&quot;Giants&quot;</value>
            <value>&quot;Jaguars&quot;</value>
            <value>&quot;Lions&quot;</value>
            <value>&quot;Packers&quot;</value>
            <value>&quot;Patriots&quot;</value>
            <value>&quot;Saints&quot;</value>
            <value>&quot;Seahawks&quot;</value>
            <value>&quot;Steelers&quot;</value>
            <value>&quot;Texans&quot;</value>
            <value>&quot;Titans&quot;</value>
            <value>&quot;Vikings&quot;</value>
            <value>&quot;Washington&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='string' name='[Team Name (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[team_name]' new-bin='true'>
          <bin default-name='false' value='&quot; Jets&quot;'>
            <value>&quot;New York Jets&quot;</value>
          </bin>
          <bin default-name='false' value='&quot; Panthers&quot;'>
            <value>&quot;Carolina Panthers&quot;</value>
          </bin>
          <bin default-name='false' value='&quot; Raiders&quot;'>
            <value>&quot;Las Vegas Raiders&quot;</value>
            <value>&quot;Oakland Raiders&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;49ers&quot;'>
            <value>&quot;San Francisco 49ers&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Bears&quot;'>
            <value>&quot;Chicago Bears&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Bengals&quot;'>
            <value>&quot;Cincinnati Bengals&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Bills&quot;'>
            <value>&quot;Buffalo Bills&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Broncos&quot;'>
            <value>&quot;Denver Broncos&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Browns&quot;'>
            <value>&quot;Cleveland Browns&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Buccaneers&quot;'>
            <value>&quot;Tampa Bay Buccaneers&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Cardinals&quot;'>
            <value>&quot;Arizona Cardinals&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Chargers&quot;'>
            <value>&quot;Los Angeles Chargers&quot;</value>
            <value>&quot;San Diego Chargers&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Chiefs&quot;'>
            <value>&quot;Kansas City Chiefs&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Colts&quot;'>
            <value>&quot;Indianapolis Colts&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Cowboys&quot;'>
            <value>&quot;Dallas Cowboys&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Dolphins&quot;'>
            <value>&quot;Miami Dolphins&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Eagles&quot;'>
            <value>&quot;Philadelphia Eagles&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Falcons&quot;'>
            <value>&quot;Atlanta Falcons&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Giants&quot;'>
            <value>&quot;New York Giants&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Jaguars&quot;'>
            <value>&quot;Jacksonville Jaguars&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Lions&quot;'>
            <value>&quot;Detroit Lions&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Packers&quot;'>
            <value>&quot;Green Bay Packers&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Patriots&quot;'>
            <value>&quot;New England Patriots&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Rams&quot;'>
            <value>&quot;Los Angeles Rams&quot;</value>
            <value>&quot;St. Louis Rams&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Ravens&quot;'>
            <value>&quot;Baltimore Ravens&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Saints&quot;'>
            <value>&quot;New Orleans Saints&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Seahawks&quot;'>
            <value>&quot;Seattle Seahawks&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Steelers&quot;'>
            <value>&quot;Pittsburgh Steelers&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Texans&quot;'>
            <value>&quot;Houston Texans&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Titans&quot;'>
            <value>&quot;Tennessee Titans&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Vikings&quot;'>
            <value>&quot;Minnesota Vikings&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Washington&quot;'>
            <value>&quot;Washington Football Team&quot;</value>
            <value>&quot;Washington Redskins&quot;</value>
          </bin>
        </calculation>
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='team_penalties_by_year' datatype='table' name='[__tableau_internal_object_id__].[team!penalties!by!year_81A8D7F767794978845E2F0524DE833E]' role='measure' type='quantitative' />
      <column caption='Away Yards' datatype='integer' name='[away_yards]' role='measure' type='quantitative' />
      <column caption='Home Yards' datatype='integer' name='[home_yards]' role='measure' type='quantitative' />
      <column caption='Team Name' datatype='string' name='[team_name]' role='dimension' type='nominal' />
      <column caption='Total Away Penalties' datatype='integer' name='[total_away_penalties]' role='measure' type='quantitative' />
      <column caption='Total Home Penalties' datatype='integer' name='[total_home_penalties]' role='measure' type='quantitative' />
      <column caption='Total Penalties' datatype='integer' name='[total_penalties]' role='measure' type='quantitative' />
      <column caption='Total Yards' datatype='integer' name='[total_yards]' role='measure' type='quantitative' />
      <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
      <column-instance column='[total_penalties]' derivation='Avg' name='[avg:total_penalties:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_yards]' derivation='Avg' name='[avg:total_yards:qk]' pivot='key' type='quantitative' />
      <column-instance column='[team_name]' derivation='None' name='[none:team_name:nk]' pivot='key' type='nominal' />
      <column-instance column='[year]' derivation='None' name='[none:year:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_penalties]' derivation='Sum' name='[sum:total_penalties:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_yards]' derivation='Sum' name='[sum:total_yards:qk]' pivot='key' type='quantitative' />
      <group hidden='true' name='[Exclusions (Team Name (group),Year)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Team Name (group)]' />
          <groupfilter function='level-members' level='[none:year:qk]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Exclusions (Team Name,Year)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:team_name:nk]' />
          <groupfilter function='level-members' level='[none:year:qk]' />
        </groupfilter>
      </group>
      <group caption='Bad' name='[Set 1]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='reorder-dimensionality'>
          <groupfilter function='union'>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot; Jets&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot; Jets&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot; Panthers&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot; Panthers&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;49ers&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;49ers&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Bad&quot;' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[Team Name (group)]' member='&quot; Raiders&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Rams&quot;' />
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Bears&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Bears&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Bengals&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Bengals&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Bills&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Bills&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Broncos&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Broncos&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Browns&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Browns&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Buccaneers&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Buccaneers&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Cardinals&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Cardinals&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Chiefs&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Chiefs&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Colts&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Colts&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Cowboys&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Cowboys&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Dolphins&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Dolphins&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Eagles&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Eagles&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Falcons&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Falcons&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Giants&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Giants&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Jaguars&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Jaguars&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Lions&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Lions&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Packers&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Packers&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Patriots&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Patriots&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Ravens&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Ravens&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Saints&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Saints&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Seahawks&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Seahawks&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Steelers&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Steelers&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Texans&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Texans&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Titans&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Titans&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Ugly&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Chargers&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Vikings&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Vikings&quot;' />
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Team Name (group) (group)]' member='&quot;Washington&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Washington&quot;' />
            </groupfilter>
          </groupfilter>
          <order>
            <hierarchy name='[Team Name (group)]' />
            <hierarchy name='[Team Name (group) (group)]' />
          </order>
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_yards:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_penalties:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_penalties:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[Team Name (group) (group)]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Giants&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot; Jets&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot; Panthers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Saints&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Steelers&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Good&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Ravens&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Vikings&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Browns&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cardinals&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Seahawks&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Patriots&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;49ers&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lions&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bills&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Neutral&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ugly&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Falcons&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Texans&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Bad&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Dolphins&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Cowboys&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Broncos&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Chiefs&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot; Raiders&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bears&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bengals&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Eagles&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jaguars&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Washington&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Chargers&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Colts&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Packers&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;Titans&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Buccaneers&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Rams&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='team_penalties_by_year' id='team!penalties!by!year_81A8D7F767794978845E2F0524DE833E'>
            <properties context=''>
              <relation connection='excel-direct.18nol2a18ojoqv1gwyd9y0puml26' name='team_penalties_by_year' table='[team_penalties_by_year$]' type='table'>
                <columns gridOrigin='A1:H702:no:A1:H702:0' header='yes' outcome='6'>
                  <column datatype='string' name='team_name' ordinal='0' />
                  <column datatype='integer' name='year' ordinal='1' />
                  <column datatype='integer' name='total_home_penalties' ordinal='2' />
                  <column datatype='integer' name='home_yards' ordinal='3' />
                  <column datatype='integer' name='total_away_penalties' ordinal='4' />
                  <column datatype='integer' name='away_yards' ordinal='5' />
                  <column datatype='integer' name='total_penalties' ordinal='6' />
                  <column datatype='integer' name='total_yards' ordinal='7' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='AVG Season Yards'>
      <table>
        <view>
          <datasources>
            <datasource caption='team_penalties_by_year (team_penalties_by_year)' name='federated.0ybiarh0aohyf01ead9vo15ig8ud' />
          </datasources>
          <datasource-dependencies datasource='federated.0ybiarh0aohyf01ead9vo15ig8ud'>
            <column datatype='string' name='[Team Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[team_name]' new-bin='true'>
                <bin default-name='false' value='&quot; Jets&quot;'>
                  <value>&quot;New York Jets&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Panthers&quot;'>
                  <value>&quot;Carolina Panthers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Raiders&quot;'>
                  <value>&quot;Las Vegas Raiders&quot;</value>
                  <value>&quot;Oakland Raiders&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;49ers&quot;'>
                  <value>&quot;San Francisco 49ers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bears&quot;'>
                  <value>&quot;Chicago Bears&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bengals&quot;'>
                  <value>&quot;Cincinnati Bengals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bills&quot;'>
                  <value>&quot;Buffalo Bills&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Broncos&quot;'>
                  <value>&quot;Denver Broncos&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Browns&quot;'>
                  <value>&quot;Cleveland Browns&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Buccaneers&quot;'>
                  <value>&quot;Tampa Bay Buccaneers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cardinals&quot;'>
                  <value>&quot;Arizona Cardinals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chargers&quot;'>
                  <value>&quot;Los Angeles Chargers&quot;</value>
                  <value>&quot;San Diego Chargers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chiefs&quot;'>
                  <value>&quot;Kansas City Chiefs&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Colts&quot;'>
                  <value>&quot;Indianapolis Colts&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cowboys&quot;'>
                  <value>&quot;Dallas Cowboys&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Dolphins&quot;'>
                  <value>&quot;Miami Dolphins&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Eagles&quot;'>
                  <value>&quot;Philadelphia Eagles&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Falcons&quot;'>
                  <value>&quot;Atlanta Falcons&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Giants&quot;'>
                  <value>&quot;New York Giants&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Jaguars&quot;'>
                  <value>&quot;Jacksonville Jaguars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Lions&quot;'>
                  <value>&quot;Detroit Lions&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Packers&quot;'>
                  <value>&quot;Green Bay Packers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Patriots&quot;'>
                  <value>&quot;New England Patriots&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Rams&quot;'>
                  <value>&quot;Los Angeles Rams&quot;</value>
                  <value>&quot;St. Louis Rams&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Ravens&quot;'>
                  <value>&quot;Baltimore Ravens&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Saints&quot;'>
                  <value>&quot;New Orleans Saints&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Seahawks&quot;'>
                  <value>&quot;Seattle Seahawks&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Steelers&quot;'>
                  <value>&quot;Pittsburgh Steelers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Texans&quot;'>
                  <value>&quot;Houston Texans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Titans&quot;'>
                  <value>&quot;Tennessee Titans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Vikings&quot;'>
                  <value>&quot;Minnesota Vikings&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Washington&quot;'>
                  <value>&quot;Washington Football Team&quot;</value>
                  <value>&quot;Washington Redskins&quot;</value>
                </bin>
              </calculation>
            </column>
            <column-instance column='[total_penalties]' derivation='Avg' name='[avg:total_penalties:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_yards]' derivation='Avg' name='[avg:total_yards:qk]' pivot='key' type='quantitative' />
            <column caption='Team Name' datatype='string' name='[team_name]' role='dimension' type='nominal' />
            <column caption='Total Penalties' datatype='integer' name='[total_penalties]' role='measure' type='quantitative' />
            <column caption='Total Yards' datatype='integer' name='[total_yards]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_penalties:qk]' field-type='quantitative' fold='true' range-type='uniform' scope='rows' synchronized='true' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' />
            </encodings>
            <reference-line axis-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_yards:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_yards:qk]' z-order='1' />
            <reference-line axis-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_penalties:qk]' enable-instant-analytics='true' formula='average' id='refline1' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_penalties:qk]' z-order='2' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_yards:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_penalties:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-transparency' value='219' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_yards:qk] + [federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_penalties:qk])</rows>
        <cols>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</cols>
      </table>
      <simple-id uuid='{A78B37FF-FA47-4CAD-9D0E-F9CBD8EC4652}' />
    </worksheet>
    <worksheet name='AVG season penalties'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Average Season Penalties by Team</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='team_penalties_by_year (team_penalties_by_year)' name='federated.0ybiarh0aohyf01ead9vo15ig8ud' />
          </datasources>
          <datasource-dependencies datasource='federated.0ybiarh0aohyf01ead9vo15ig8ud'>
            <column datatype='string' name='[Team Name (group) (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[Team Name (group)]' new-bin='true'>
                <bin default-name='false' value='&quot;Bad&quot;'>
                  <value>&quot; Raiders&quot;</value>
                  <value>&quot;Rams&quot;</value>
                  <value>&quot;Ravens&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Good&quot;'>
                  <value>&quot; Jets&quot;</value>
                  <value>&quot;Colts&quot;</value>
                  <value>&quot;Indianapolis Colts&quot;</value>
                  <value>&quot;New York Jets&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Neutral&quot;'>
                  <value>&quot; Panthers&quot;</value>
                  <value>&quot;49ers&quot;</value>
                  <value>&quot;Bears&quot;</value>
                  <value>&quot;Bengals&quot;</value>
                  <value>&quot;Bills&quot;</value>
                  <value>&quot;Broncos&quot;</value>
                  <value>&quot;Browns&quot;</value>
                  <value>&quot;Buccaneers&quot;</value>
                  <value>&quot;Cardinals&quot;</value>
                  <value>&quot;Chargers&quot;</value>
                  <value>&quot;Chiefs&quot;</value>
                  <value>&quot;Cowboys&quot;</value>
                  <value>&quot;Dolphins&quot;</value>
                  <value>&quot;Eagles&quot;</value>
                  <value>&quot;Falcons&quot;</value>
                  <value>&quot;Giants&quot;</value>
                  <value>&quot;Jaguars&quot;</value>
                  <value>&quot;Lions&quot;</value>
                  <value>&quot;Packers&quot;</value>
                  <value>&quot;Patriots&quot;</value>
                  <value>&quot;Saints&quot;</value>
                  <value>&quot;Seahawks&quot;</value>
                  <value>&quot;Steelers&quot;</value>
                  <value>&quot;Texans&quot;</value>
                  <value>&quot;Titans&quot;</value>
                  <value>&quot;Vikings&quot;</value>
                  <value>&quot;Washington&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[Team Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[team_name]' new-bin='true'>
                <bin default-name='false' value='&quot; Jets&quot;'>
                  <value>&quot;New York Jets&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Panthers&quot;'>
                  <value>&quot;Carolina Panthers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Raiders&quot;'>
                  <value>&quot;Las Vegas Raiders&quot;</value>
                  <value>&quot;Oakland Raiders&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;49ers&quot;'>
                  <value>&quot;San Francisco 49ers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bears&quot;'>
                  <value>&quot;Chicago Bears&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bengals&quot;'>
                  <value>&quot;Cincinnati Bengals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bills&quot;'>
                  <value>&quot;Buffalo Bills&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Broncos&quot;'>
                  <value>&quot;Denver Broncos&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Browns&quot;'>
                  <value>&quot;Cleveland Browns&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Buccaneers&quot;'>
                  <value>&quot;Tampa Bay Buccaneers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cardinals&quot;'>
                  <value>&quot;Arizona Cardinals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chargers&quot;'>
                  <value>&quot;Los Angeles Chargers&quot;</value>
                  <value>&quot;San Diego Chargers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chiefs&quot;'>
                  <value>&quot;Kansas City Chiefs&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Colts&quot;'>
                  <value>&quot;Indianapolis Colts&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cowboys&quot;'>
                  <value>&quot;Dallas Cowboys&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Dolphins&quot;'>
                  <value>&quot;Miami Dolphins&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Eagles&quot;'>
                  <value>&quot;Philadelphia Eagles&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Falcons&quot;'>
                  <value>&quot;Atlanta Falcons&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Giants&quot;'>
                  <value>&quot;New York Giants&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Jaguars&quot;'>
                  <value>&quot;Jacksonville Jaguars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Lions&quot;'>
                  <value>&quot;Detroit Lions&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Packers&quot;'>
                  <value>&quot;Green Bay Packers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Patriots&quot;'>
                  <value>&quot;New England Patriots&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Rams&quot;'>
                  <value>&quot;Los Angeles Rams&quot;</value>
                  <value>&quot;St. Louis Rams&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Ravens&quot;'>
                  <value>&quot;Baltimore Ravens&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Saints&quot;'>
                  <value>&quot;New Orleans Saints&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Seahawks&quot;'>
                  <value>&quot;Seattle Seahawks&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Steelers&quot;'>
                  <value>&quot;Pittsburgh Steelers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Texans&quot;'>
                  <value>&quot;Houston Texans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Titans&quot;'>
                  <value>&quot;Tennessee Titans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Vikings&quot;'>
                  <value>&quot;Minnesota Vikings&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Washington&quot;'>
                  <value>&quot;Washington Football Team&quot;</value>
                  <value>&quot;Washington Redskins&quot;</value>
                </bin>
              </calculation>
            </column>
            <column-instance column='[total_penalties]' derivation='Avg' name='[avg:total_penalties:qk]' pivot='key' type='quantitative' />
            <column caption='Team Name' datatype='string' name='[team_name]' role='dimension' type='nominal' />
            <column caption='Total Penalties' datatype='integer' name='[total_penalties]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <computed-sort column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]' direction='DESC' using='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_penalties:qk]' />
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_penalties:qk]' scope='rows' value='Average Season Penalties' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group) (group)]' value='14' />
            <format attr='font-size' field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_penalties:qk]' value='14' />
            <format attr='font-size' field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]' value='14' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group) (group)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-color' value='#4e79a7' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[avg:total_penalties:qk]</rows>
        <cols>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</cols>
      </table>
      <simple-id uuid='{C430A3E2-3C80-4A1B-94D8-592CA544EDD1}' />
    </worksheet>
    <worksheet name='Team penalties over years'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Penalties per Season from 1999 - 2019
</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='team_penalties_by_year (team_penalties_by_year)' name='federated.0ybiarh0aohyf01ead9vo15ig8ud' />
          </datasources>
          <datasource-dependencies datasource='federated.0ybiarh0aohyf01ead9vo15ig8ud'>
            <column datatype='string' name='[Team Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[team_name]' new-bin='true'>
                <bin default-name='false' value='&quot; Jets&quot;'>
                  <value>&quot;New York Jets&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Panthers&quot;'>
                  <value>&quot;Carolina Panthers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Raiders&quot;'>
                  <value>&quot;Las Vegas Raiders&quot;</value>
                  <value>&quot;Oakland Raiders&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;49ers&quot;'>
                  <value>&quot;San Francisco 49ers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bears&quot;'>
                  <value>&quot;Chicago Bears&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bengals&quot;'>
                  <value>&quot;Cincinnati Bengals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bills&quot;'>
                  <value>&quot;Buffalo Bills&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Broncos&quot;'>
                  <value>&quot;Denver Broncos&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Browns&quot;'>
                  <value>&quot;Cleveland Browns&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Buccaneers&quot;'>
                  <value>&quot;Tampa Bay Buccaneers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cardinals&quot;'>
                  <value>&quot;Arizona Cardinals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chargers&quot;'>
                  <value>&quot;Los Angeles Chargers&quot;</value>
                  <value>&quot;San Diego Chargers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chiefs&quot;'>
                  <value>&quot;Kansas City Chiefs&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Colts&quot;'>
                  <value>&quot;Indianapolis Colts&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cowboys&quot;'>
                  <value>&quot;Dallas Cowboys&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Dolphins&quot;'>
                  <value>&quot;Miami Dolphins&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Eagles&quot;'>
                  <value>&quot;Philadelphia Eagles&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Falcons&quot;'>
                  <value>&quot;Atlanta Falcons&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Giants&quot;'>
                  <value>&quot;New York Giants&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Jaguars&quot;'>
                  <value>&quot;Jacksonville Jaguars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Lions&quot;'>
                  <value>&quot;Detroit Lions&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Packers&quot;'>
                  <value>&quot;Green Bay Packers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Patriots&quot;'>
                  <value>&quot;New England Patriots&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Rams&quot;'>
                  <value>&quot;Los Angeles Rams&quot;</value>
                  <value>&quot;St. Louis Rams&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Ravens&quot;'>
                  <value>&quot;Baltimore Ravens&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Saints&quot;'>
                  <value>&quot;New Orleans Saints&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Seahawks&quot;'>
                  <value>&quot;Seattle Seahawks&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Steelers&quot;'>
                  <value>&quot;Pittsburgh Steelers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Texans&quot;'>
                  <value>&quot;Houston Texans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Titans&quot;'>
                  <value>&quot;Tennessee Titans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Vikings&quot;'>
                  <value>&quot;Minnesota Vikings&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Washington&quot;'>
                  <value>&quot;Washington Football Team&quot;</value>
                  <value>&quot;Washington Redskins&quot;</value>
                </bin>
              </calculation>
            </column>
            <column-instance column='[team_name]' derivation='None' name='[none:team_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[year]' derivation='None' name='[none:year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_penalties]' derivation='Sum' name='[sum:total_penalties:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_yards]' derivation='Sum' name='[sum:total_yards:qk]' pivot='key' type='quantitative' />
            <column caption='Team Name' datatype='string' name='[team_name]' role='dimension' type='nominal' />
            <column caption='Total Penalties' datatype='integer' name='[total_penalties]' role='measure' type='quantitative' />
            <column caption='Total Yards' datatype='integer' name='[total_yards]' role='measure' type='quantitative' />
            <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Exclusions (Team Name,Year)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:team_name:nk]' />
                <groupfilter function='level-members' level='[none:year:qk]' />
              </groupfilter>
              <groupfilter function='reorder-dimensionality'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:year:qk]' member='2020' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Arizona Cardinals&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Atlanta Falcons&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Baltimore Ravens&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Buffalo Bills&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Carolina Panthers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Chicago Bears&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Cincinnati Bengals&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Cleveland Browns&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Dallas Cowboys&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Denver Broncos&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Detroit Lions&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Green Bay Packers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Houston Texans&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Indianapolis Colts&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Jacksonville Jaguars&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Kansas City Chiefs&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Las Vegas Raiders&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Los Angeles Chargers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Los Angeles Rams&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Miami Dolphins&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Minnesota Vikings&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;New England Patriots&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;New Orleans Saints&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;New York Giants&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;New York Jets&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Philadelphia Eagles&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Pittsburgh Steelers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;San Francisco 49ers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Seattle Seahawks&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Tampa Bay Buccaneers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Tennessee Titans&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Washington Football Team&quot;' />
                  </groupfilter>
                </groupfilter>
                <order>
                  <hierarchy name='[none:team_name:nk]' />
                  <hierarchy name='[none:year:qk]' />
                </order>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Team Name (group)]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Arizona Cardinals&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Atlanta Falcons&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Buffalo Bills&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Carolina Panthers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Chargers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Chicago Bears&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Cincinnati Bengals&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Cleveland Browns&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Dallas Cowboys&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Denver Broncos&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Detroit Lions&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Green Bay Packers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Houston Texans&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Jacksonville Jaguars&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Kansas City Chiefs&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Miami Dolphins&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Minnesota Vikings&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;New England Patriots&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;New Orleans Saints&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;New York Giants&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Philadelphia Eagles&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Pittsburgh Steelers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;San Francisco 49ers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Seattle Seahawks&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Tampa Bay Buccaneers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Tennessee Titans&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Washington Football Team&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]' direction='ASC'>
            <dictionary>
              <bucket>&quot; Raiders&quot;</bucket>
              <bucket>&quot;Baltimore Ravens&quot;</bucket>
              <bucket>&quot;Rams&quot;</bucket>
              <bucket>&quot;Indianapolis Colts&quot;</bucket>
              <bucket>&quot;New York Jets&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Exclusions (Team Name,Year)]</column>
            <column>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_penalties:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)] * ([federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_penalties:qk] + [federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]))</rows>
        <cols>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]</cols>
      </table>
      <simple-id uuid='{F62DFF85-22BC-4457-9A7B-A8CB67DC691D}' />
    </worksheet>
    <worksheet name='Team yards over years'>
      <table>
        <view>
          <datasources>
            <datasource caption='team_penalties_by_year (team_penalties_by_year)' name='federated.0ybiarh0aohyf01ead9vo15ig8ud' />
          </datasources>
          <datasource-dependencies datasource='federated.0ybiarh0aohyf01ead9vo15ig8ud'>
            <column datatype='string' name='[Team Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[team_name]' new-bin='true'>
                <bin default-name='false' value='&quot; Jets&quot;'>
                  <value>&quot;New York Jets&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Panthers&quot;'>
                  <value>&quot;Carolina Panthers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Raiders&quot;'>
                  <value>&quot;Las Vegas Raiders&quot;</value>
                  <value>&quot;Oakland Raiders&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;49ers&quot;'>
                  <value>&quot;San Francisco 49ers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bears&quot;'>
                  <value>&quot;Chicago Bears&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bengals&quot;'>
                  <value>&quot;Cincinnati Bengals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bills&quot;'>
                  <value>&quot;Buffalo Bills&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Broncos&quot;'>
                  <value>&quot;Denver Broncos&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Browns&quot;'>
                  <value>&quot;Cleveland Browns&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Buccaneers&quot;'>
                  <value>&quot;Tampa Bay Buccaneers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cardinals&quot;'>
                  <value>&quot;Arizona Cardinals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chargers&quot;'>
                  <value>&quot;Los Angeles Chargers&quot;</value>
                  <value>&quot;San Diego Chargers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chiefs&quot;'>
                  <value>&quot;Kansas City Chiefs&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Colts&quot;'>
                  <value>&quot;Indianapolis Colts&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cowboys&quot;'>
                  <value>&quot;Dallas Cowboys&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Dolphins&quot;'>
                  <value>&quot;Miami Dolphins&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Eagles&quot;'>
                  <value>&quot;Philadelphia Eagles&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Falcons&quot;'>
                  <value>&quot;Atlanta Falcons&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Giants&quot;'>
                  <value>&quot;New York Giants&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Jaguars&quot;'>
                  <value>&quot;Jacksonville Jaguars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Lions&quot;'>
                  <value>&quot;Detroit Lions&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Packers&quot;'>
                  <value>&quot;Green Bay Packers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Patriots&quot;'>
                  <value>&quot;New England Patriots&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Rams&quot;'>
                  <value>&quot;Los Angeles Rams&quot;</value>
                  <value>&quot;St. Louis Rams&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Ravens&quot;'>
                  <value>&quot;Baltimore Ravens&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Saints&quot;'>
                  <value>&quot;New Orleans Saints&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Seahawks&quot;'>
                  <value>&quot;Seattle Seahawks&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Steelers&quot;'>
                  <value>&quot;Pittsburgh Steelers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Texans&quot;'>
                  <value>&quot;Houston Texans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Titans&quot;'>
                  <value>&quot;Tennessee Titans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Vikings&quot;'>
                  <value>&quot;Minnesota Vikings&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Washington&quot;'>
                  <value>&quot;Washington Football Team&quot;</value>
                  <value>&quot;Washington Redskins&quot;</value>
                </bin>
              </calculation>
            </column>
            <column-instance column='[team_name]' derivation='None' name='[none:team_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[year]' derivation='None' name='[none:year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_yards]' derivation='Sum' name='[sum:total_yards:qk]' pivot='key' type='quantitative' />
            <column caption='Team Name' datatype='string' name='[team_name]' role='dimension' type='nominal' />
            <column caption='Total Yards' datatype='integer' name='[total_yards]' role='measure' type='quantitative' />
            <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Exclusions (Team Name,Year)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:team_name:nk]' />
                <groupfilter function='level-members' level='[none:year:qk]' />
              </groupfilter>
              <groupfilter function='reorder-dimensionality'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:year:qk]' member='2020' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Arizona Cardinals&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Atlanta Falcons&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Baltimore Ravens&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Buffalo Bills&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Carolina Panthers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Chicago Bears&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Cincinnati Bengals&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Cleveland Browns&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Dallas Cowboys&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Denver Broncos&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Detroit Lions&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Green Bay Packers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Houston Texans&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Indianapolis Colts&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Jacksonville Jaguars&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Kansas City Chiefs&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Las Vegas Raiders&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Los Angeles Chargers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Los Angeles Rams&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Miami Dolphins&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Minnesota Vikings&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;New England Patriots&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;New Orleans Saints&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;New York Giants&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;New York Jets&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Philadelphia Eagles&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Pittsburgh Steelers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;San Francisco 49ers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Seattle Seahawks&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Tampa Bay Buccaneers&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Tennessee Titans&quot;' />
                    <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Washington Football Team&quot;' />
                  </groupfilter>
                </groupfilter>
                <order>
                  <hierarchy name='[none:team_name:nk]' />
                  <hierarchy name='[none:year:qk]' />
                </order>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Team Name (group)]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Arizona Cardinals&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Atlanta Falcons&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Buffalo Bills&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Carolina Panthers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Chargers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Chicago Bears&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Cincinnati Bengals&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Cleveland Browns&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Dallas Cowboys&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Denver Broncos&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Detroit Lions&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Green Bay Packers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Houston Texans&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Jacksonville Jaguars&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Kansas City Chiefs&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Miami Dolphins&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Minnesota Vikings&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;New England Patriots&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;New Orleans Saints&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;New York Giants&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Philadelphia Eagles&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Pittsburgh Steelers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;San Francisco 49ers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Seattle Seahawks&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Tampa Bay Buccaneers&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Tennessee Titans&quot;' />
                <groupfilter function='member' level='[Team Name (group)]' member='&quot;Washington Football Team&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Exclusions (Team Name,Year)]</column>
            <column>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-mode' value='range' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)] * [federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk])</rows>
        <cols>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]</cols>
      </table>
      <simple-id uuid='{74FDE929-5BE3-4EFD-A659-380F3F710F1E}' />
    </worksheet>
    <worksheet name='Total Penalties over Years'>
      <table>
        <view>
          <datasources>
            <datasource caption='team_penalties_by_year (team_penalties_by_year)' name='federated.0ybiarh0aohyf01ead9vo15ig8ud' />
          </datasources>
          <datasource-dependencies datasource='federated.0ybiarh0aohyf01ead9vo15ig8ud'>
            <column-instance column='[year]' derivation='None' name='[none:year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[year]' derivation='None' name='[none:year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_penalties]' derivation='Sum' name='[sum:total_penalties:qk]' pivot='key' type='quantitative' />
            <column caption='Total Penalties' datatype='integer' name='[total_penalties]' role='measure' type='quantitative' />
            <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:ok]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:year:ok]' />
              <groupfilter function='member' level='[none:year:ok]' member='2020' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_penalties:qk]</rows>
        <cols>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]</cols>
      </table>
      <simple-id uuid='{81C7049E-5A2C-4341-8D75-B33E71CDFBDA}' />
    </worksheet>
    <worksheet name='Total Team Penalties'>
      <table>
        <view>
          <datasources>
            <datasource caption='team_penalties_by_year (team_penalties_by_year)' name='federated.0ybiarh0aohyf01ead9vo15ig8ud' />
          </datasources>
          <datasource-dependencies datasource='federated.0ybiarh0aohyf01ead9vo15ig8ud'>
            <column datatype='string' name='[Team Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[team_name]' new-bin='true'>
                <bin default-name='false' value='&quot; Jets&quot;'>
                  <value>&quot;New York Jets&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Panthers&quot;'>
                  <value>&quot;Carolina Panthers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Raiders&quot;'>
                  <value>&quot;Las Vegas Raiders&quot;</value>
                  <value>&quot;Oakland Raiders&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;49ers&quot;'>
                  <value>&quot;San Francisco 49ers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bears&quot;'>
                  <value>&quot;Chicago Bears&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bengals&quot;'>
                  <value>&quot;Cincinnati Bengals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bills&quot;'>
                  <value>&quot;Buffalo Bills&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Broncos&quot;'>
                  <value>&quot;Denver Broncos&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Browns&quot;'>
                  <value>&quot;Cleveland Browns&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Buccaneers&quot;'>
                  <value>&quot;Tampa Bay Buccaneers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cardinals&quot;'>
                  <value>&quot;Arizona Cardinals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chargers&quot;'>
                  <value>&quot;Los Angeles Chargers&quot;</value>
                  <value>&quot;San Diego Chargers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chiefs&quot;'>
                  <value>&quot;Kansas City Chiefs&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Colts&quot;'>
                  <value>&quot;Indianapolis Colts&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cowboys&quot;'>
                  <value>&quot;Dallas Cowboys&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Dolphins&quot;'>
                  <value>&quot;Miami Dolphins&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Eagles&quot;'>
                  <value>&quot;Philadelphia Eagles&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Falcons&quot;'>
                  <value>&quot;Atlanta Falcons&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Giants&quot;'>
                  <value>&quot;New York Giants&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Jaguars&quot;'>
                  <value>&quot;Jacksonville Jaguars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Lions&quot;'>
                  <value>&quot;Detroit Lions&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Packers&quot;'>
                  <value>&quot;Green Bay Packers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Patriots&quot;'>
                  <value>&quot;New England Patriots&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Rams&quot;'>
                  <value>&quot;Los Angeles Rams&quot;</value>
                  <value>&quot;St. Louis Rams&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Ravens&quot;'>
                  <value>&quot;Baltimore Ravens&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Saints&quot;'>
                  <value>&quot;New Orleans Saints&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Seahawks&quot;'>
                  <value>&quot;Seattle Seahawks&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Steelers&quot;'>
                  <value>&quot;Pittsburgh Steelers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Texans&quot;'>
                  <value>&quot;Houston Texans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Titans&quot;'>
                  <value>&quot;Tennessee Titans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Vikings&quot;'>
                  <value>&quot;Minnesota Vikings&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Washington&quot;'>
                  <value>&quot;Washington Football Team&quot;</value>
                  <value>&quot;Washington Redskins&quot;</value>
                </bin>
              </calculation>
            </column>
            <column-instance column='[team_name]' derivation='None' name='[none:team_name:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_penalties]' derivation='Sum' name='[sum:total_penalties:qk]' pivot='key' type='quantitative' />
            <column caption='Team Name' datatype='string' name='[team_name]' role='dimension' type='nominal' />
            <column caption='Total Penalties' datatype='integer' name='[total_penalties]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:team_name:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:team_name:nk]' />
              <groupfilter function='member' level='[none:team_name:nk]' member='&quot;Las Vegas Raiders&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:team_name:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <reference-line axis-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_penalties:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_penalties:qk]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-mode' value='range' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_penalties:qk]</rows>
        <cols>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</cols>
      </table>
      <simple-id uuid='{D32D9907-F64C-4D08-8303-1FD4D2A16F2C}' />
    </worksheet>
    <worksheet name='Total Team Yards'>
      <table>
        <view>
          <datasources>
            <datasource caption='team_penalties_by_year (team_penalties_by_year)' name='federated.0ybiarh0aohyf01ead9vo15ig8ud' />
          </datasources>
          <datasource-dependencies datasource='federated.0ybiarh0aohyf01ead9vo15ig8ud'>
            <column datatype='string' name='[Team Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[team_name]' new-bin='true'>
                <bin default-name='false' value='&quot; Jets&quot;'>
                  <value>&quot;New York Jets&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Panthers&quot;'>
                  <value>&quot;Carolina Panthers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Raiders&quot;'>
                  <value>&quot;Las Vegas Raiders&quot;</value>
                  <value>&quot;Oakland Raiders&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;49ers&quot;'>
                  <value>&quot;San Francisco 49ers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bears&quot;'>
                  <value>&quot;Chicago Bears&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bengals&quot;'>
                  <value>&quot;Cincinnati Bengals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bills&quot;'>
                  <value>&quot;Buffalo Bills&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Broncos&quot;'>
                  <value>&quot;Denver Broncos&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Browns&quot;'>
                  <value>&quot;Cleveland Browns&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Buccaneers&quot;'>
                  <value>&quot;Tampa Bay Buccaneers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cardinals&quot;'>
                  <value>&quot;Arizona Cardinals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chargers&quot;'>
                  <value>&quot;Los Angeles Chargers&quot;</value>
                  <value>&quot;San Diego Chargers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chiefs&quot;'>
                  <value>&quot;Kansas City Chiefs&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Colts&quot;'>
                  <value>&quot;Indianapolis Colts&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cowboys&quot;'>
                  <value>&quot;Dallas Cowboys&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Dolphins&quot;'>
                  <value>&quot;Miami Dolphins&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Eagles&quot;'>
                  <value>&quot;Philadelphia Eagles&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Falcons&quot;'>
                  <value>&quot;Atlanta Falcons&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Giants&quot;'>
                  <value>&quot;New York Giants&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Jaguars&quot;'>
                  <value>&quot;Jacksonville Jaguars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Lions&quot;'>
                  <value>&quot;Detroit Lions&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Packers&quot;'>
                  <value>&quot;Green Bay Packers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Patriots&quot;'>
                  <value>&quot;New England Patriots&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Rams&quot;'>
                  <value>&quot;Los Angeles Rams&quot;</value>
                  <value>&quot;St. Louis Rams&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Ravens&quot;'>
                  <value>&quot;Baltimore Ravens&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Saints&quot;'>
                  <value>&quot;New Orleans Saints&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Seahawks&quot;'>
                  <value>&quot;Seattle Seahawks&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Steelers&quot;'>
                  <value>&quot;Pittsburgh Steelers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Texans&quot;'>
                  <value>&quot;Houston Texans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Titans&quot;'>
                  <value>&quot;Tennessee Titans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Vikings&quot;'>
                  <value>&quot;Minnesota Vikings&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Washington&quot;'>
                  <value>&quot;Washington Football Team&quot;</value>
                  <value>&quot;Washington Redskins&quot;</value>
                </bin>
              </calculation>
            </column>
            <column-instance column='[total_yards]' derivation='Sum' name='[sum:total_yards:qk]' pivot='key' type='quantitative' />
            <column caption='Team Name' datatype='string' name='[team_name]' role='dimension' type='nominal' />
            <column caption='Total Yards' datatype='integer' name='[total_yards]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <reference-line axis-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]' z-order='1' />
          </pane>
        </panes>
        <rows>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]</rows>
        <cols>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</cols>
      </table>
      <simple-id uuid='{7D4E8E09-36A6-4BCD-9D0B-371E10DF78CD}' />
    </worksheet>
    <worksheet name='Total Yards over Years'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Total Penalties &amp; Penalty Yards (1999-2019)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='team_penalties_by_year (team_penalties_by_year)' name='federated.0ybiarh0aohyf01ead9vo15ig8ud' />
          </datasources>
          <datasource-dependencies datasource='federated.0ybiarh0aohyf01ead9vo15ig8ud'>
            <column-instance column='[year]' derivation='None' name='[none:year:ok]' pivot='key' type='ordinal' />
            <column-instance column='[year]' derivation='None' name='[none:year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_penalties]' derivation='Sum' name='[sum:total_penalties:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_yards]' derivation='Sum' name='[sum:total_yards:qk]' pivot='key' type='quantitative' />
            <column caption='Total Penalties' datatype='integer' name='[total_penalties]' role='measure' type='quantitative' />
            <column caption='Total Yards' datatype='integer' name='[total_yards]' role='measure' type='quantitative' />
            <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:ok]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:year:ok]' />
              <groupfilter function='member' level='[none:year:ok]' member='2020' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_penalties:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]' field-type='quantitative' max='2019' min='1999' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]' field-type='quantitative' max='33623' min='10000' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-size' scope='rows' value='14' />
            <format attr='font-size' scope='cols' value='14' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='14' />
          </style-rule>
          <style-rule element='title'>
            <format attr='font-size' value='20' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_penalties:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk] + [federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_penalties:qk])</rows>
        <cols>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]</cols>
      </table>
      <simple-id uuid='{1FBB9EA2-560D-4D7E-954E-94D30F2B64ED}' />
    </worksheet>
    <worksheet name='high penalty teams'>
      <table>
        <view>
          <datasources>
            <datasource caption='team_penalties_by_year (team_penalties_by_year)' name='federated.0ybiarh0aohyf01ead9vo15ig8ud' />
          </datasources>
          <datasource-dependencies datasource='federated.0ybiarh0aohyf01ead9vo15ig8ud'>
            <column datatype='string' name='[Team Name (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[team_name]' new-bin='true'>
                <bin default-name='false' value='&quot; Jets&quot;'>
                  <value>&quot;New York Jets&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Panthers&quot;'>
                  <value>&quot;Carolina Panthers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot; Raiders&quot;'>
                  <value>&quot;Las Vegas Raiders&quot;</value>
                  <value>&quot;Oakland Raiders&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;49ers&quot;'>
                  <value>&quot;San Francisco 49ers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bears&quot;'>
                  <value>&quot;Chicago Bears&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bengals&quot;'>
                  <value>&quot;Cincinnati Bengals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Bills&quot;'>
                  <value>&quot;Buffalo Bills&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Broncos&quot;'>
                  <value>&quot;Denver Broncos&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Browns&quot;'>
                  <value>&quot;Cleveland Browns&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Buccaneers&quot;'>
                  <value>&quot;Tampa Bay Buccaneers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cardinals&quot;'>
                  <value>&quot;Arizona Cardinals&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chargers&quot;'>
                  <value>&quot;Los Angeles Chargers&quot;</value>
                  <value>&quot;San Diego Chargers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Chiefs&quot;'>
                  <value>&quot;Kansas City Chiefs&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Colts&quot;'>
                  <value>&quot;Indianapolis Colts&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Cowboys&quot;'>
                  <value>&quot;Dallas Cowboys&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Dolphins&quot;'>
                  <value>&quot;Miami Dolphins&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Eagles&quot;'>
                  <value>&quot;Philadelphia Eagles&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Falcons&quot;'>
                  <value>&quot;Atlanta Falcons&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Giants&quot;'>
                  <value>&quot;New York Giants&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Jaguars&quot;'>
                  <value>&quot;Jacksonville Jaguars&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Lions&quot;'>
                  <value>&quot;Detroit Lions&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Packers&quot;'>
                  <value>&quot;Green Bay Packers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Patriots&quot;'>
                  <value>&quot;New England Patriots&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Rams&quot;'>
                  <value>&quot;Los Angeles Rams&quot;</value>
                  <value>&quot;St. Louis Rams&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Ravens&quot;'>
                  <value>&quot;Baltimore Ravens&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Saints&quot;'>
                  <value>&quot;New Orleans Saints&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Seahawks&quot;'>
                  <value>&quot;Seattle Seahawks&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Steelers&quot;'>
                  <value>&quot;Pittsburgh Steelers&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Texans&quot;'>
                  <value>&quot;Houston Texans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Titans&quot;'>
                  <value>&quot;Tennessee Titans&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Vikings&quot;'>
                  <value>&quot;Minnesota Vikings&quot;</value>
                </bin>
                <bin default-name='false' value='&quot;Washington&quot;'>
                  <value>&quot;Washington Football Team&quot;</value>
                  <value>&quot;Washington Redskins&quot;</value>
                </bin>
              </calculation>
            </column>
            <column-instance column='[year]' derivation='None' name='[none:year:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_yards]' derivation='Sum' name='[sum:total_yards:qk]' pivot='key' type='quantitative' />
            <column caption='Team Name' datatype='string' name='[team_name]' role='dimension' type='nominal' />
            <column caption='Total Yards' datatype='integer' name='[total_yards]' role='measure' type='quantitative' />
            <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Exclusions (Team Name (group),Year)]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[Team Name (group)]' />
                <groupfilter function='level-members' level='[none:year:qk]' />
              </groupfilter>
              <groupfilter function='reorder-dimensionality'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[none:year:qk]' member='2020' />
                  <groupfilter function='union'>
                    <groupfilter function='member' level='[Team Name (group)]' member='&quot;Baltimore Ravens&quot;' />
                    <groupfilter function='member' level='[Team Name (group)]' member='&quot;New York Giants&quot;' />
                    <groupfilter function='member' level='[Team Name (group)]' member='&quot;Rams&quot;' />
                    <groupfilter function='member' level='[Team Name (group)]' member='&quot;Washington Football Team&quot;' />
                  </groupfilter>
                </groupfilter>
                <order>
                  <hierarchy name='[Team Name (group)]' />
                  <hierarchy name='[none:year:qk]' />
                </order>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[Team Name (group)]' member='&quot; Raiders&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Baltimore Ravens&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Cincinnati Bengals&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Dallas Cowboys&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Detroit Lions&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Indianapolis Colts&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;New England Patriots&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;New Orleans Saints&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;New York Giants&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Philadelphia Eagles&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Rams&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Seattle Seahawks&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Tennessee Titans&quot;' />
              <groupfilter function='member' level='[Team Name (group)]' member='&quot;Washington Football Team&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</column>
            <column>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Exclusions (Team Name (group),Year)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]' field-type='quantitative' max='2019' min='1997' range-type='fixed' scope='cols' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]' />
            </encodings>
            <reference-line axis-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]' z-order='1' />
            <reference-line axis-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]' enable-instant-analytics='true' formula='average' id='refline1' label-type='automatic' probability='95' scope='per-table' value-column='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]' z-order='2' />
          </pane>
        </panes>
        <rows>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]</rows>
        <cols>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]</cols>
      </table>
      <simple-id uuid='{2D7DDB47-60C0-4E2A-B423-48C99A1D602E}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='4' w='100000' x='0' y='0'>
          <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98000' id='7' param='horz' w='98400' x='800' y='1000'>
            <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='98000' id='5' w='98400' x='800' y='1000'>
              <zone h='98000' id='3' name='Total Yards over Years' w='98400' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
        <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='10125' id='8' name='Total Yards over Years' pane-specification-id='2' param='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' w='16700' x='69000' y='75125' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='10' w='100000' x='0' y='0'>
              <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98000' id='9' param='vert' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='98000' id='3' is-fixed='true' name='Total Yards over Years' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone _.fcp.SetMembershipControl.false...type='color' _.fcp.SetMembershipControl.true...type-v2='color' h='10125' id='8' name='Total Yards over Years' pane-specification-id='2' param='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' w='16700' x='69000' y='75125'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{BCD455B8-8875-4C41-98D8-03FC96F84C01}' />
    </dashboard>
    <dashboard name='Dashboard 2'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='4' w='100000' x='0' y='0'>
          <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98000' id='7' param='horz' w='98400' x='800' y='1000'>
            <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='98000' id='5' w='98400' x='800' y='1000'>
              <zone h='98000' id='3' name='AVG season penalties' w='98400' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone _.fcp.SetMembershipControl.false...type='layout-basic' _.fcp.SetMembershipControl.true...type-v2='layout-basic' h='100000' id='9' w='100000' x='0' y='0'>
              <zone _.fcp.SetMembershipControl.false...type='layout-flow' _.fcp.SetMembershipControl.true...type-v2='layout-flow' h='98000' id='8' param='vert' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='98000' id='3' is-fixed='true' name='AVG season penalties' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{D17092FD-DE6B-423D-A971-02838E30E05C}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Team yards over years'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</field>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:team_name:nk]</field>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4AF86AB1-5D4A-4D93-9637-337E70147565}' />
    </window>
    <window class='worksheet' name='Team penalties over years'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='3' param='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</field>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:team_name:nk]</field>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E013ECC0-5059-4835-BA92-C3974DF2E4C8}' />
    </window>
    <window class='worksheet' name='Total Team Penalties'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</field>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:team_name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DC697A0B-678D-405C-BA4E-AA250912217B}' />
    </window>
    <window class='worksheet' name='Total Team Yards'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</field>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:team_name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6A83FC12-0B30-486C-A72C-4DA77D852199}' />
    </window>
    <window class='worksheet' name='AVG season penalties'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='100'>
            <card pane-specification-id='0' param='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group) (group)]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group) (group)]</field>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</field>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:team_name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7ADDA00F-CA87-44C7-9DFC-9B5511D906A5}' />
    </window>
    <window class='worksheet' name='AVG Season Yards'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</field>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:team_name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5BEE416E-CE20-4C16-8713-018302BC7751}' />
    </window>
    <window class='worksheet' name='high penalty teams'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group)]</field>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{70A06C80-2A74-47B8-AA7B-BA194A52699F}' />
    </window>
    <window class='worksheet' name='Total Yards over Years'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <axis>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[sum:total_yards:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C1832AF3-63B8-446C-9AD7-9D528D983DC3}' />
    </window>
    <window class='worksheet' name='Total Penalties over Years'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0ybiarh0aohyf01ead9vo15ig8ud].[none:year:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A3E6B91E-AD8F-4C45-9452-2F651762B1B3}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Total Yards over Years'>
          <zoom type='entire-view' />
          <highlight field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[:Measure Names]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='3' />
      <simple-id uuid='{EBCD39E9-0976-4BAC-AC05-B7BFEC2259DD}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='AVG season penalties'>
          <zoom type='entire-view' />
          <highlight field='[federated.0ybiarh0aohyf01ead9vo15ig8ud].[Team Name (group) (group)]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='3' />
      <simple-id uuid='{6A91CD6D-4582-4435-A240-85CFEABEE857}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='AVG Season Yards' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='AVG season penalties' width='192'>
      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
      AP8fTwWb1KGYbsgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      VqeGAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Team penalties over years' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Team yards over years' width='192'>
      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
      jS0Amz3N/w/oRT6c5Xq+kQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Total Penalties over Years' width='192'>
      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
      rhBDRw+QtUJsv2UH3g9+ZucyGIEIpubgsQxsBYYGmmGhnEJFOiQIUQ3zAhBqbKFuMkVmapgC
      XViA5Q/T3ADhcJhc3sZn6eQdDc3JY3j9c10hSu2Q4DhO1WqhtM4OjuOgaVpNrrPbajVNK74r
      hOXzE6mPAObcUSDT4yUen9keeD/YLFgz/yppUEIsF/NiZVgeLpx/nxdf3I1djREJcRXNC4Dl
      8dHSuZq2WLga4xHiqrrEyXB5Dh88QjhSJ98EixXvEnsWBi1NUbK6KZ/wxYo3LwBOwUbpBiqd
      JFeNEQlxFc0LwNmDe5l0dOob4nJFmFjx5h0GrW9u4/qWVvxIywix8s0LQKy9oxrjEKIq5E1e
      uJoEQLiaBEC4mgRAuJoEQLiaBEC4mgRAuJoEQLiaBEC4mgRAuFpRN8ouZFO8PzRGvc9gIlUg
      ZCmSBR29kMITitHeEl/qcQqxJIoKgOkN4LMmsR2HbCaDx/RjaTaaL4SdS+E4Do7jlNwdwnGc
      ku9IU07t7HhLGfdsTantOqq1zm6sXUhRAcilE4yMjNLU1Iim63gMSCsLPZfEE4rPdYUwjNJO
      oC4UCphmUUOpaO1saEsZdzkdJaB66+zGWsMwiu8KcSkef4jrrtsCQFtJwxBieZKdYOFqEgDh
      ahIA4WoSAOFqEgDhahIA4WoSAOFqEgDhahIA4WoSAOFqEgDhahIA4WoSAOFqEgDhahIA4WoS
      AOFqEgDhahIA4WpFXRJp5zMMjU0RDXoYmkgSDZik5rpCNBCLyC1VRW3SVBEtERzHZmBgCMex
      QSkcTUNzbDTdRCmHzs5ObNu+7IXHV16+U/LF5eXUzq56KeMupxaqt85Se7Ei+wKlGRwcIB6L
      MZXO/cYW4AKeUEy6QpSgVjss1GJtRbpC7Nixo6QBCLGcyU6wcDUJgHA1CYBwNQmAcDUJgHA1
      CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwNQmAcDUJgHA1CYBwtUVd
      aJlLJxkan6IpGiJj6+iFDFagDr/XWqrxCbGkFhWA/v4+DH+EwaFRbMdB0zS0iSl6errnLhIv
      heM42LZ91WuVUhTRFGPB2lLrq7XObqxdqHPHogIQjUQ5fLKPxoYQ2YKG7mSxAhE0TUPX9bLa
      k1SrttT6cmpn66W2+rWLCkBdQ5zt9TEMXcMBNOWg6eZcwkrtkVOt2nL7AmmaVnPr7MbaheoX
      FQBdN5gN08xfpfUBEmK5kKNAwtUkAMLVJADC1SQAwtUkAMLVJADC1SQAwtUkAMLVJADC1SQA
      wtUkAMLVJADC1SQAwtUkAMLVJADC1coKwOTYKMlMvlJjEeKqKzkASjmMTyUYHjhXyfEIcVWV
      tQXIJKZwNLkqTNSu0u4/D2iazvqNm8u+VlOIaio5AMDc1faO45TVFkUpVVZrk3JqgZLqZ2vL
      aatSrXV2W+1Cc7OsAMyaDUKprStm26pc7dpyu0KUWjtbV2uvV63WLtS9Q1OlvoUJsQJUZAsA
      gFIcPniQrlWtHDo+iKnZ6CgiTS2c6+tn1407Lnr42NAAaUfj/FA/fp/FVEoR8GokM1l6N22n
      3n/5xI8OnCOnm4wO9OPzmiTSCtMETYPV6z9C2Hv52umJ8xw70Uew3kvB1tHyGQyvj8x0gqbu
      tbQ1Ri5bOzUxyvGT/QTDHmxHR+Uy+MJR0qkEmzdtXPDlyWcSHD58HN3rI5/L4/eZFJRJnU8n
      bZv0ru25bG0uPc3hw8cx/X7y2QI+n46NRdB0SCs/117TffkntvOcOHGMdM4hl80TCAfJZLJ0
      tzdzun+MbVs2LFh7/PhR0jlFPpcnUBckk87hszTC0SY6WpsWXOdzZ08xnUySzhTweT1k02n8
      9REM08Pani4W2nieO3OS6VSSVNrG5/WQy6SItrRz7v0+btp5PfoCxeeHB+gbnsCr5zG9PhIX
      Uvg8OolMhjUbdxALfnjgpnJfhGkajfE4ZjBKnWXjD0XIpxKE6urp6uqZ9/BIrBHTNGiKR0kV
      TCJ+mE7l8VrGFT/vRWONmKZJvKGejGMR9jr4QvXkUwnyhYX3RRQanat78Hr8BDwagboGVCFD
      vKmFfC53xdqu1T14vX78FgTrY+iaItYQveLLo4BoUyt1QT/xSAgsPwGviWFYdHd1XPF5G1ra
      Cfn9xCJBNCuA39LxeP14rCv8CjWwfGGa4xFamuKkcg7x+hBn+vrJppMs+GppYPnqaI7X09oU
      I52DWH0Qr8/PyOjoFdfZMAy62luINrWRSiRob4kzPjnN2OgIeXvh35NumHS3txBtbieZmKaj
      JY4vXEdXV/eCkx9mDtD09HTjD9VjqgzRxjay2Rx+j0mhcPHcqtgWQClFIp2gMObBG47R1hJj
      OBigztKpb43Pe/z42DCpLPgMi/W9nYwMDrK9t4W+c8NEggsPa3x8lFQevIaH9eu6GB4aoqU5
      xkggQPQKtUo5XJi4QHNjlLyyIJegqWUDU2MjtLQ2LlzrOExOTNAcr6egeVDZabzBGEP9fUxM
      JYnWBReoVaQSU7S2tZJMZen0G2SUQWJshMkLU7Q0Nlz+iR2H1PSFmdp0lnavTg6L1OR5Ghub
      rzBmRT6XIVTfTM5J8pF1PZyfTLK1ZzWZdHrBd0Dng9q6SAv5ZILN1zRy/kKKOsMhHF34tQIo
      FApcyGj49Txbtm1jeGiY66/bwODIOJax8CQuFPJMZkP4tTQf3bGdocERmn0mhBde35lx21yY
      mCQaCmAG20mMj7Bp61b6+vpprLu4kbPsAwhXk3OBhKtJAISrSQCEq0kAhKv9HwKqqElVGWUb
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Total Team Penalties' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Total Team Yards' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Total Yards over Years' width='192'>
      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
      /x++DPm7Qi151AAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='high penalty teams' width='192'>
      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
      RfP/Aaq2vbke4/QyAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
